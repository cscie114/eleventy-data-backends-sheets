require('dotenv').config();
const { AssetCache } = require("@11ty/eleventy-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const { JWT } = require("google-auth-library");
const cacheDuration = "15m";

module.exports = async function () {
  const cacheKey = "courses";
  const asset = new AssetCache(cacheKey);

  // check if the cache is fresh within the last day
  if (asset.isCacheValid(cacheDuration)) {
    console.log("Returning cached courses");
    return asset.getCachedValue(); // a promise
  }

  const data = await getCoursesFromSheets();
  await asset.save(data, "json");
  return data;
};

async function getCoursesFromSheets() {
  const sheetTitle = "courses";

  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(
    process.env.GOOGLE_SPREADSHEET_ID,
    serviceAccountAuth
  );

  await doc.loadInfo(); // loads document properties and worksheets

  //  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  const sheet = doc.sheetsByTitle[sheetTitle];
  console.log(sheet.title);
  console.log(sheet.rowCount);
  console.log(sheet.gridProperties);

  const rows = await sheet.getRows();
  let sheetData = [];
  console.log(rows.length);
  
  let fields = [
    "academicYear",
    "term",
    "termCode",
    "courseCode",
    "courseNumber",
    "shortTitle",
    "title",
    "facultyDescription",
    "subjectCode",
    "subject",
    "courseType",
    "credits",
    "creditUnvergraduate",
    "creditGraduate",
    "url",
    "daysOfWeek",
    "startTime",
    "endTime",
    "location",
    "notes",
    "description"
  ];
  
  rows.forEach((r) => {
    let rowData = {};
    fields.forEach((f) => {
      rowData[f] = r.get(f);
    });
    sheetData.push(rowData);
  });
  return sheetData;
}
/*
academicYear	term	termCode	courseCode	courseNumber	shortTitle	title	facultyDescription	subjectCode	subject	courseType	credits	creditUnvergraduate	creditGraduate	url	daysOfWeek	startTime	endTime	location	notes	description					

*/