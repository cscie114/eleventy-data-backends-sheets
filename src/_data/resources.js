require("dotenv").config();
const EleventyFetch = require("@11ty/eleventy-fetch");

module.exports = async function () {
  const data = await getDataFromSheets();
  return data;
};

async function getDataFromSheets() {
  console.log("in getDataFromSheets");
  const { GoogleSpreadsheet } = require("google-spreadsheet");
  const { JWT } = require("google-auth-library");

  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(
    process.env.GOOGLE_SPREADSHEET_ID,
    serviceAccountAuth
  );

  await doc.loadInfo(); // loads document properties and worksheets
  console.log(doc.title);

  //  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  const sheetSubjects = doc.sheetsByTitle["links-detail"];
  console.log(sheetSubjects.title);
  console.log(sheetSubjects.rowCount);
  console.log(sheetSubjects.gridProperties);

  const rows = await sheetSubjects.getRows();
  let sheetsData = [];
  console.log("resources rows");
  console.log(rows.length); // 2
  console.log(rows[5].get("title"));
  rows.forEach((r) => {
    if (r.get("title") && r.get("url")) {
      sheetsData.push({
        url: r.get("url"),
        title: r.get("title"),
        description: r.get("description"),
        localImage: r.get("localImage"),
        image: r.get("image"),
      });
    }
  });
  return sheetsData;
}
