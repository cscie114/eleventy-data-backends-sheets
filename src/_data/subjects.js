require('dotenv').config();
const { AssetCache } = require("@11ty/eleventy-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const { JWT } = require("google-auth-library");
const cacheDuration = "15m";

module.exports = async function () {
  const cacheKey = "subjects";
  const asset = new AssetCache(cacheKey);

  // check if the cache is fresh within the last day
  if (asset.isCacheValid(cacheDuration)) {
    console.log("Returning cached subjects");
    return asset.getCachedValue(); // a promise
  }

  const data = await getSubjectsFromSheets();
  await asset.save(data, "json");
  return data;
};

async function getSubjectsFromSheets() {
  const sheetTitle = "subjects";

  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(
    process.env.GOOGLE_SPREADSHEET_ID,
    serviceAccountAuth
  );

  await doc.loadInfo(); // loads document properties and worksheets

  //  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  const sheet = doc.sheetsByTitle[sheetTitle];
  console.log(sheet.title);
  console.log(sheet.rowCount);
  console.log(sheet.gridProperties);

  const rows = await sheet.getRows();
  let subjectData = [];
  console.log(rows.length);
  rows.forEach((r) => {
    console.log(r.get("subjectFullName"));
    subjectData.push({
      subjectCode: r.get("subjectCode"),
      subjectFullName: r.get("subjectFullName"),
    });
  });
  return subjectData;
}
